-> Desenvolvimento e operação de software integrado 
Parte 1: DevOps Conceitos e Práticas 

- DevOps
    _ Development 
    _ IT Opertations 
    _Quality Assurance(QA)

    * As separadas 
    * Cada time tinha suas metas 
    * Não ajudava o outro time 

    O DevOps veio unir.

    "DevOps é um termo criado para definir o conjunto de 
    práticas que integram e automatizam os processos entre 
    as equipes de desenvolvimento, operações e de apoio 
    (como QA) para a produção rápida e confiável de software".

    O conceito do DevOps baseia-se em criar uma cultura de 
    colaboração entre as equipe que sempre trabalharam 
    separadas. 
    DevOps é uma mudança de mentalidade, uma cultura, um 
    movimento, uma filosofia.

> Framework CALMS 
    - Culture 
        Todas ferramentas e automações são inuteis se não forem 
        acompanhada pela verdadeira disposição da área de 
        desenvolvimento e operações em trabalhar juntos.
    - Automation
        Porque DevOps naõ resolve problemas de ferramentas.
        Resolve problemas humanos.

        Automação elimina o trabalho manual repetitivo, produz 
        processos repetíveis e cria sistemas confiáveis.
        Automatizar gera velocidade na entrega e tornam os 
        envolvidos mais produtivos.

        Normalmente, compilação, teste, implementação e 
        provisionamento automatizados são o ponto de partida 
        típico para equipes que ainda não têm  isso implantado. 

    - Lean 
        Precisamos focar nas entregas de valo ao cliente. 
        Precisamos ser objetivos e enxutos. Precisamos 
        COnhecer as nossas limitações e os gargalos do processo. 
        Precisamos ser Lean. 

        A mentalidade DevOps vê oportunidades de melhoria 
        contínua em toda parte. Identificando as limitações, 
        podemos otimizar o fluxo, entregando mais velocidade e 
        maior eficiência. 

    - Measurement 
        DevOps é cíclico e infinito. Mensusar e obter métricas é 
        o ponot de partida para novas melhorias, seja para o 
        processo de desenvolvimento, o software produzido ou a 
        regras constantemente. 

        Além de gerar conhecimento, métricas criam previsibilidade 
        sobre possíveis incidentes que possam vir a surgir. Assim, 
        temos insumos suficientes para analisar falhas e gerar 
        melhorias constantes. 

    - Sharing
        O compartilhamento de informações, além de ser saudável, 
        auxilia na descentralização de conhecimento em pessoas dos 
        times, evitando que os problemas se tornem dependentes. 

        Compartilhar conhecimento ajuda na criação de times 
        genéricos, com conhecimentos básicos em diversos assuntos 
        do negócio e tecnologias. Assim, o time se torna 
        autossustentável.

    Serve para suportar se estamos conseguindo aplicar os pilares 


> Os três Caminhos 
    - Flow 
        A otimização do flux visa eliminar desperdícios, gargalos 
        no processo, transferência de responsabilidades e tempos
        de espera. Esse caminho é trilhado entre a demanda e a 
        entrega em produção. 

        A chave para este caminho é a aplicação de metodologias 
        ágeis e a automatização dos processos do desenvolvimento 
        à release, como a integração contínua e /ou entrega 
        contínua 

    - FeedBack
        Ciclos rápidos de feedbacks visam resolver problemas o 
        quanto antes, testando tudo, alertando em qualquer falha, 
        considerando todas as métricas coletadas no ambiente 
        produtivo sobre o valor entregado. 

        O monitoramento é a chave, ajudando  a gerar informações 
        relevantes constantemente. Com feedbacks rápidos, o 
        negócio consegue falhar rápodo e logo retomar o rumo 
        caso necessário. 

    - Learning
        O aprendizado contínuo visa gerar conhecimento através 
        da experimentação. Hipoteses são melhores do que uma 
        certeza imediata. Este caminho é fruto do processo 
        científico e produz segurança psicológica.

        A chave é o trabalho dinâmico, com times realizando 
        experimentos em seu trablho diário para gerar novas 
        melhorias. Elimine a cultura da culpa e a aumente a 
        colaboração e o compartilhamento de conhecimento.  


> Entregando Software 
    - Planejamento 
        Microsoft Teams 
        Draw.io 
        Balsamiq 
        roamunk 
        Confluence 
            Jira
    - Desenvolvimento
        Visaul Studio 
        GitHub 
        Sublime Text 
        cmder 
            git 
        VS Code 
        Notepad++
    - Construção 
        container 
        docker 
        NuGet 
        npm 
        cri-o 
        .NET CLI 
        MSBuild
    - Teste 
        Unit.net 
        loader.io 
        JMeter 
        SELENIUM 
        Runscope 
        PostMan 
        sonarqube 
        code climate 
        codacy
    - realise 
        disponibilizar o software para o cliente agora.
    - deploy
        Azure Pipelines 
        circleci 
        AppVeyar 
        GitLab CI 
        Travis CI 
        Jen kins
    - operação 
        Kubernetes 
        RANCHEAR 
        Microsoft Azure
        puppet 
        Rerraform 
            CHEF 
        OPENSHIFT 
            AWS 
    - Monitoramento 
        DATADOG 
        Prometheus 
        APPMETRICS 
        Rollbar
        zabbix 
        new relic 
        pushover 
        seq 
        monitis







