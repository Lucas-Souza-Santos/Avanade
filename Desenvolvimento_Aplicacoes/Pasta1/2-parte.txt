-> Padrão MVC 
    O MVC é um padrão de arquitetura que divide a aplicação em 
    três camadas: a visão(view), o modelo(model) e o 
    controlador(controller).

    O MVC é um padrão muito utilizado devido a sua arquitetura 
    que possibilita separar o projeto em camadas onde cada uma 
    delas executa o que lhe é definido e nada mais 
    Esse padrão pode ser aplicado em diversos tipos de projetos 
    como, por exemplo, desktop, web e mobile.

    O MVC traz como benefício o isolamento das regras de 
    negócios da interface do usuário, o que permite que exista 
    várias interfaces de usuários que podem ser modificadas sem 
    afetar a regra do negócio.

> Camada Model 
    É a camada responsável pela leitura e escrita de dados, e 
    também de suas validações
> Camada View 
    É a camada de interaçõa com o usuário. Ela apenas faz a 
    exibição dos dados, sendo ela por meio de um HTML ou XML.
> Camada Controller 
    É a camada responsável por receber todas as requisições e 
    por controlar qual model usar e qual wiew será mostrado ao 
    usuário. 

-> ASP.NET Web Forms 
    No modelo ASP.NET Web Forms as requisições do navegador 
    eram enviadas para páginas, que deveriam existir 
    fisicamente, com isso cada URL deveria ter uma página física 
    que a represente. 

- Routes 
    Quando uma aplicação ASP.NET MVC é crada já é configurado um 
    padrão de rota default: 
    Ex:
    url:"{controller}/{action}/{id}"
    defaults: new {controller = "Home", action = "index", id =
    UrlParameter.Optional}

    Esse padrão já atende a maioria das necessidades, porém é 
    possível criar padrões personalizados.

- Custom Routes 
    Para determinadas necessidades podemos criar rotas 
    personalizadas, isso permite uma maior flexibilidade e que
    seja possível gerar URLs mais amigáveis para o usuário o que 
    torna a aplicação mais acessível. 
    Ex: 
    url:"student/{id}/{name}/{standardls}"
    defaults: new {controller = "student", action = "index", id = 
    UrlParameter, name UrlParameter.Optional, standardld = 
    UrlParameter.Optional},

    Exemplo de uma URL utilizando a rota default: 

    http://localhost:1234/home/index/100

    http://localhost:1234/home/index

-> Action Results
- Definição
    O Action Result é o resultado de uma Ação processada por 
    uma controller, o action result possui diversos tipos.
- Tipos 
    Segue uma relação dos Action Results, usaremos algumas deles 
    na criação da nossa aplicação.:
    +-------+-------------------------------+
    |       |content Returning Results|     |
    +-------+-------------------------+-----+
    |                                       |
    |                                       |

-> HTTP Verbs 
    Os HTTP Verbs são métodos do protocolo HTTP que informa ao 
    servidor qual ação ele deve executar
            
            GET         * Buscar recursos
                        * Cache 
            POST        * Criar um novo recurso 
            PUT/PATCH   * Atualizar um recurso existente 
            DELETE      * Remover um recurso 
-> Razor 
     O razor é uma view Engine utilizada no ASP.NET MVC. O seu 
     principal objetivo é simplificar o desenvolvimento de 
     aplicações ASP.NET pois ele deixa o código mais simples, 
     fácil e legível.

-> Benefícios 
    Como benefícios principais temos: 
    * Menor curva de aprendizagem, por ser baseado na linguagem 
    de programação C# 
    * Por possir uma sintaxe limpa ele requer que o desenvolvedor 
    digite menos para chegar a um resultado; 
    * O visual studio possui IntelliSense para páginas razor o 
    que nos dá uma maior produtividade. 

-> Middlewares           
- Definição: 
    Middlewares são componentes(classes) que é executado em 
    todas as solicitações na aplicação ASP.NET.
    Normalmente existem vários middlewares na aplicação e nós 
    definimos a ordem em que são executados. 
    Cada middleware adiciona ou modifica a solicitação http e 
    pode passar o controle para o proximo middleware.

-> Startup 
    Como o próprio nome diz, a classe Startup.cs é responsável
    por ser o ponto inicial do projeto. Dentro dela existem 
    métodos que são responsáveis por configurarem o projeto. São 
    eles: 
    * ConfigureServices  
    * Configure 
> ConfigureServices
    O método ConfigureServices é responsável por registrar as 
    classes ao contêiner de injeção de dependência, após isso a 
    classe poderá ser usada em qualquer lugar da aplicação 
    desde que seja incluída no construtor da classe em que
    deseja usar.
> Configure 
    O configure controla o pipeline da aplicação, é nesse 
    método que são especificados os middleware que serão 
    utilizados. Se nada for colocado nesse método nem o MVC 
    funcionará poois não foi indicado a aplicação o que utilizar. 
    Deve ser adicionada apenas os middleware que forem ser 
    utilizados caso contrário poderá acontecer a perda de 
    performance.
